# coding: utf-8

"""
    WestMarches API

    West Marches API  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import inspect
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class Stock(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'discount_percentage': 'float',
        'discount_fixed': 'int',
        'unlimited': 'bool',
        'amount': 'int',
        'item': 'Item',
        'price': 'int'
    }

    attribute_map = {
        'id': 'id',
        'discount_percentage': 'discountPercentage',
        'discount_fixed': 'discountFixed',
        'unlimited': 'unlimited',
        'amount': 'amount',
        'item': 'item',
        'price': 'price'
    }

    def __init__(self, id=None, discount_percentage=None, discount_fixed=None, unlimited=None, amount=None, item=None, price=None, local_vars_configuration=None):  # noqa: E501
        """Stock - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._discount_percentage = None
        self._discount_fixed = None
        self._unlimited = None
        self._amount = None
        self._item = None
        self._price = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.discount_percentage = discount_percentage
        if discount_fixed is not None:
            self.discount_fixed = discount_fixed
        if unlimited is not None:
            self.unlimited = unlimited
        if amount is not None:
            self.amount = amount
        if item is not None:
            self.item = item
        if price is not None:
            self.price = price

    @property
    def id(self):
        """Gets the id of this Stock.  # noqa: E501


        :return: The id of this Stock.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Stock.


        :param id: The id of this Stock.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def discount_percentage(self):
        """Gets the discount_percentage of this Stock.  # noqa: E501


        :return: The discount_percentage of this Stock.  # noqa: E501
        :rtype: float
        """
        return self._discount_percentage

    @discount_percentage.setter
    def discount_percentage(self, discount_percentage):
        """Sets the discount_percentage of this Stock.


        :param discount_percentage: The discount_percentage of this Stock.  # noqa: E501
        :type discount_percentage: float
        """
        if self.local_vars_configuration.client_side_validation and discount_percentage is None:  # noqa: E501
            raise ValueError("Invalid value for `discount_percentage`, must not be `None`")  # noqa: E501

        self._discount_percentage = discount_percentage

    @property
    def discount_fixed(self):
        """Gets the discount_fixed of this Stock.  # noqa: E501


        :return: The discount_fixed of this Stock.  # noqa: E501
        :rtype: int
        """
        return self._discount_fixed

    @discount_fixed.setter
    def discount_fixed(self, discount_fixed):
        """Sets the discount_fixed of this Stock.


        :param discount_fixed: The discount_fixed of this Stock.  # noqa: E501
        :type discount_fixed: int
        """

        self._discount_fixed = discount_fixed

    @property
    def unlimited(self):
        """Gets the unlimited of this Stock.  # noqa: E501


        :return: The unlimited of this Stock.  # noqa: E501
        :rtype: bool
        """
        return self._unlimited

    @unlimited.setter
    def unlimited(self, unlimited):
        """Sets the unlimited of this Stock.


        :param unlimited: The unlimited of this Stock.  # noqa: E501
        :type unlimited: bool
        """

        self._unlimited = unlimited

    @property
    def amount(self):
        """Gets the amount of this Stock.  # noqa: E501


        :return: The amount of this Stock.  # noqa: E501
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Stock.


        :param amount: The amount of this Stock.  # noqa: E501
        :type amount: int
        """

        self._amount = amount

    @property
    def item(self):
        """Gets the item of this Stock.  # noqa: E501


        :return: The item of this Stock.  # noqa: E501
        :rtype: Item
        """
        return self._item

    @item.setter
    def item(self, item):
        """Sets the item of this Stock.


        :param item: The item of this Stock.  # noqa: E501
        :type item: Item
        """

        self._item = item

    @property
    def price(self):
        """Gets the price of this Stock.  # noqa: E501


        :return: The price of this Stock.  # noqa: E501
        :rtype: int
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this Stock.


        :param price: The price of this Stock.  # noqa: E501
        :type price: int
        """

        self._price = price

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = inspect.getargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Stock):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Stock):
            return True

        return self.to_dict() != other.to_dict()
