# coding: utf-8

"""
    WestMarches API

    West Marches API  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import inspect
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class Item(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'home_brew_origin': 'Campaign',
        'item_name': 'str',
        'currency_value': 'int',
        'game_system': 'GameSystem'
    }

    attribute_map = {
        'id': 'id',
        'home_brew_origin': 'homeBrewOrigin',
        'item_name': 'itemName',
        'currency_value': 'currencyValue',
        'game_system': 'game_System'
    }

    def __init__(self, id=None, home_brew_origin=None, item_name=None, currency_value=None, game_system=None, local_vars_configuration=None):  # noqa: E501
        """Item - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._home_brew_origin = None
        self._item_name = None
        self._currency_value = None
        self._game_system = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if home_brew_origin is not None:
            self.home_brew_origin = home_brew_origin
        self.item_name = item_name
        self.currency_value = currency_value
        if game_system is not None:
            self.game_system = game_system

    @property
    def id(self):
        """Gets the id of this Item.  # noqa: E501


        :return: The id of this Item.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Item.


        :param id: The id of this Item.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def home_brew_origin(self):
        """Gets the home_brew_origin of this Item.  # noqa: E501


        :return: The home_brew_origin of this Item.  # noqa: E501
        :rtype: Campaign
        """
        return self._home_brew_origin

    @home_brew_origin.setter
    def home_brew_origin(self, home_brew_origin):
        """Sets the home_brew_origin of this Item.


        :param home_brew_origin: The home_brew_origin of this Item.  # noqa: E501
        :type home_brew_origin: Campaign
        """

        self._home_brew_origin = home_brew_origin

    @property
    def item_name(self):
        """Gets the item_name of this Item.  # noqa: E501


        :return: The item_name of this Item.  # noqa: E501
        :rtype: str
        """
        return self._item_name

    @item_name.setter
    def item_name(self, item_name):
        """Sets the item_name of this Item.


        :param item_name: The item_name of this Item.  # noqa: E501
        :type item_name: str
        """
        if self.local_vars_configuration.client_side_validation and item_name is None:  # noqa: E501
            raise ValueError("Invalid value for `item_name`, must not be `None`")  # noqa: E501

        self._item_name = item_name

    @property
    def currency_value(self):
        """Gets the currency_value of this Item.  # noqa: E501


        :return: The currency_value of this Item.  # noqa: E501
        :rtype: int
        """
        return self._currency_value

    @currency_value.setter
    def currency_value(self, currency_value):
        """Sets the currency_value of this Item.


        :param currency_value: The currency_value of this Item.  # noqa: E501
        :type currency_value: int
        """
        if self.local_vars_configuration.client_side_validation and currency_value is None:  # noqa: E501
            raise ValueError("Invalid value for `currency_value`, must not be `None`")  # noqa: E501

        self._currency_value = currency_value

    @property
    def game_system(self):
        """Gets the game_system of this Item.  # noqa: E501


        :return: The game_system of this Item.  # noqa: E501
        :rtype: GameSystem
        """
        return self._game_system

    @game_system.setter
    def game_system(self, game_system):
        """Sets the game_system of this Item.


        :param game_system: The game_system of this Item.  # noqa: E501
        :type game_system: GameSystem
        """

        self._game_system = game_system

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = inspect.getargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Item):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Item):
            return True

        return self.to_dict() != other.to_dict()
