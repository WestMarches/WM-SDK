# coding: utf-8

"""
    WestMarches API

    West Marches API  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import inspect
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class Guild(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'campaign': 'Campaign',
        'discord_id': 'int',
        'guild_name': 'str',
        'store_category_name': 'str'
    }

    attribute_map = {
        'campaign': 'campaign',
        'discord_id': 'discordId',
        'guild_name': 'guildName',
        'store_category_name': 'storeCategoryName'
    }

    def __init__(self, campaign=None, discord_id=None, guild_name=None, store_category_name=None, local_vars_configuration=None):  # noqa: E501
        """Guild - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._campaign = None
        self._discord_id = None
        self._guild_name = None
        self._store_category_name = None
        self.discriminator = None

        if campaign is not None:
            self.campaign = campaign
        self.discord_id = discord_id
        self.guild_name = guild_name
        self.store_category_name = store_category_name

    @property
    def campaign(self):
        """Gets the campaign of this Guild.  # noqa: E501


        :return: The campaign of this Guild.  # noqa: E501
        :rtype: Campaign
        """
        return self._campaign

    @campaign.setter
    def campaign(self, campaign):
        """Sets the campaign of this Guild.


        :param campaign: The campaign of this Guild.  # noqa: E501
        :type campaign: Campaign
        """

        self._campaign = campaign

    @property
    def discord_id(self):
        """Gets the discord_id of this Guild.  # noqa: E501


        :return: The discord_id of this Guild.  # noqa: E501
        :rtype: int
        """
        return self._discord_id

    @discord_id.setter
    def discord_id(self, discord_id):
        """Sets the discord_id of this Guild.


        :param discord_id: The discord_id of this Guild.  # noqa: E501
        :type discord_id: int
        """
        if self.local_vars_configuration.client_side_validation and discord_id is None:  # noqa: E501
            raise ValueError("Invalid value for `discord_id`, must not be `None`")  # noqa: E501

        self._discord_id = discord_id

    @property
    def guild_name(self):
        """Gets the guild_name of this Guild.  # noqa: E501


        :return: The guild_name of this Guild.  # noqa: E501
        :rtype: str
        """
        return self._guild_name

    @guild_name.setter
    def guild_name(self, guild_name):
        """Sets the guild_name of this Guild.


        :param guild_name: The guild_name of this Guild.  # noqa: E501
        :type guild_name: str
        """
        if self.local_vars_configuration.client_side_validation and guild_name is None:  # noqa: E501
            raise ValueError("Invalid value for `guild_name`, must not be `None`")  # noqa: E501

        self._guild_name = guild_name

    @property
    def store_category_name(self):
        """Gets the store_category_name of this Guild.  # noqa: E501


        :return: The store_category_name of this Guild.  # noqa: E501
        :rtype: str
        """
        return self._store_category_name

    @store_category_name.setter
    def store_category_name(self, store_category_name):
        """Sets the store_category_name of this Guild.


        :param store_category_name: The store_category_name of this Guild.  # noqa: E501
        :type store_category_name: str
        """

        self._store_category_name = store_category_name

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = inspect.getargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Guild):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Guild):
            return True

        return self.to_dict() != other.to_dict()
