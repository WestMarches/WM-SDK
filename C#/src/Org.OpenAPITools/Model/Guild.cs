/*
 * WestMarches API
 *
 * West Marches API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Guild
    /// </summary>
    [DataContract(Name = "Guild")]
    public partial class Guild : IEquatable<Guild>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Guild" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Guild() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Guild" /> class.
        /// </summary>
        /// <param name="campaign">campaign.</param>
        /// <param name="discordId">discordId (required).</param>
        /// <param name="guildName">guildName (required).</param>
        /// <param name="storeCategoryName">storeCategoryName.</param>
        public Guild(Campaign campaign = default(Campaign), long discordId = default(long), string guildName = default(string), string storeCategoryName = default(string))
        {
            this.DiscordId = discordId;
            // to ensure "guildName" is required (not null)
            this.GuildName = guildName ?? throw new ArgumentNullException("guildName is a required property for Guild and cannot be null");
            this.Campaign = campaign;
            this.StoreCategoryName = storeCategoryName;
        }

        /// <summary>
        /// Gets or Sets Campaign
        /// </summary>
        [DataMember(Name = "campaign", EmitDefaultValue = false)]
        public Campaign Campaign { get; set; }

        /// <summary>
        /// Gets or Sets DiscordId
        /// </summary>
        [DataMember(Name = "discordId", IsRequired = true, EmitDefaultValue = false)]
        public long DiscordId { get; set; }

        /// <summary>
        /// Gets or Sets GuildName
        /// </summary>
        [DataMember(Name = "guildName", IsRequired = true, EmitDefaultValue = false)]
        public string GuildName { get; set; }

        /// <summary>
        /// Gets or Sets StoreCategoryName
        /// </summary>
        [DataMember(Name = "storeCategoryName", EmitDefaultValue = true)]
        public string StoreCategoryName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Guild {\n");
            sb.Append("  Campaign: ").Append(Campaign).Append("\n");
            sb.Append("  DiscordId: ").Append(DiscordId).Append("\n");
            sb.Append("  GuildName: ").Append(GuildName).Append("\n");
            sb.Append("  StoreCategoryName: ").Append(StoreCategoryName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Guild);
        }

        /// <summary>
        /// Returns true if Guild instances are equal
        /// </summary>
        /// <param name="input">Instance of Guild to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Guild input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Campaign == input.Campaign ||
                    (this.Campaign != null &&
                    this.Campaign.Equals(input.Campaign))
                ) && 
                (
                    this.DiscordId == input.DiscordId ||
                    this.DiscordId.Equals(input.DiscordId)
                ) && 
                (
                    this.GuildName == input.GuildName ||
                    (this.GuildName != null &&
                    this.GuildName.Equals(input.GuildName))
                ) && 
                (
                    this.StoreCategoryName == input.StoreCategoryName ||
                    (this.StoreCategoryName != null &&
                    this.StoreCategoryName.Equals(input.StoreCategoryName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Campaign != null)
                    hashCode = hashCode * 59 + this.Campaign.GetHashCode();
                hashCode = hashCode * 59 + this.DiscordId.GetHashCode();
                if (this.GuildName != null)
                    hashCode = hashCode * 59 + this.GuildName.GetHashCode();
                if (this.StoreCategoryName != null)
                    hashCode = hashCode * 59 + this.StoreCategoryName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
