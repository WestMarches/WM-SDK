/*
 * WestMarches API
 *
 * West Marches API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// RegistrationRequest
    /// </summary>
    [DataContract(Name = "RegistrationRequest")]
    public partial class RegistrationRequest : IEquatable<RegistrationRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RegistrationRequest" /> class.
        /// </summary>
        /// <param name="discordId">discordId.</param>
        /// <param name="givenName">givenName.</param>
        /// <param name="familyName">familyName.</param>
        /// <param name="ddBeyondIds">ddBeyondIds.</param>
        public RegistrationRequest(long discordId = default(long), string givenName = default(string), string familyName = default(string), List<long> ddBeyondIds = default(List<long>))
        {
            this.DiscordId = discordId;
            this.GivenName = givenName;
            this.FamilyName = familyName;
            this.DdBeyondIds = ddBeyondIds;
        }

        /// <summary>
        /// Gets or Sets DiscordId
        /// </summary>
        [DataMember(Name = "discordId", EmitDefaultValue = false)]
        public long DiscordId { get; set; }

        /// <summary>
        /// Gets or Sets GivenName
        /// </summary>
        [DataMember(Name = "givenName", EmitDefaultValue = true)]
        public string GivenName { get; set; }

        /// <summary>
        /// Gets or Sets FamilyName
        /// </summary>
        [DataMember(Name = "familyName", EmitDefaultValue = true)]
        public string FamilyName { get; set; }

        /// <summary>
        /// Gets or Sets DdBeyondIds
        /// </summary>
        [DataMember(Name = "ddBeyondIds", EmitDefaultValue = true)]
        public List<long> DdBeyondIds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RegistrationRequest {\n");
            sb.Append("  DiscordId: ").Append(DiscordId).Append("\n");
            sb.Append("  GivenName: ").Append(GivenName).Append("\n");
            sb.Append("  FamilyName: ").Append(FamilyName).Append("\n");
            sb.Append("  DdBeyondIds: ").Append(DdBeyondIds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RegistrationRequest);
        }

        /// <summary>
        /// Returns true if RegistrationRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of RegistrationRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RegistrationRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DiscordId == input.DiscordId ||
                    this.DiscordId.Equals(input.DiscordId)
                ) && 
                (
                    this.GivenName == input.GivenName ||
                    (this.GivenName != null &&
                    this.GivenName.Equals(input.GivenName))
                ) && 
                (
                    this.FamilyName == input.FamilyName ||
                    (this.FamilyName != null &&
                    this.FamilyName.Equals(input.FamilyName))
                ) && 
                (
                    this.DdBeyondIds == input.DdBeyondIds ||
                    this.DdBeyondIds != null &&
                    input.DdBeyondIds != null &&
                    this.DdBeyondIds.SequenceEqual(input.DdBeyondIds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.DiscordId.GetHashCode();
                if (this.GivenName != null)
                    hashCode = hashCode * 59 + this.GivenName.GetHashCode();
                if (this.FamilyName != null)
                    hashCode = hashCode * 59 + this.FamilyName.GetHashCode();
                if (this.DdBeyondIds != null)
                    hashCode = hashCode * 59 + this.DdBeyondIds.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
