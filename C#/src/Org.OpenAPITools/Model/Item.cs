/*
 * WestMarches API
 *
 * West Marches API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Item
    /// </summary>
    [DataContract(Name = "Item")]
    public partial class Item : IEquatable<Item>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Item" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Item() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Item" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="homeBrewOrigin">homeBrewOrigin.</param>
        /// <param name="itemName">itemName (required).</param>
        /// <param name="currencyValue">currencyValue (required).</param>
        /// <param name="gameSystem">gameSystem.</param>
        public Item(Guid id = default(Guid), Campaign homeBrewOrigin = default(Campaign), string itemName = default(string), int currencyValue = default(int), GameSystem gameSystem = default(GameSystem))
        {
            // to ensure "itemName" is required (not null)
            this.ItemName = itemName ?? throw new ArgumentNullException("itemName is a required property for Item and cannot be null");
            this.CurrencyValue = currencyValue;
            this.Id = id;
            this.HomeBrewOrigin = homeBrewOrigin;
            this.GameSystem = gameSystem;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets HomeBrewOrigin
        /// </summary>
        [DataMember(Name = "homeBrewOrigin", EmitDefaultValue = false)]
        public Campaign HomeBrewOrigin { get; set; }

        /// <summary>
        /// Gets or Sets ItemName
        /// </summary>
        [DataMember(Name = "itemName", IsRequired = true, EmitDefaultValue = false)]
        public string ItemName { get; set; }

        /// <summary>
        /// Gets or Sets CurrencyValue
        /// </summary>
        [DataMember(Name = "currencyValue", IsRequired = true, EmitDefaultValue = false)]
        public int CurrencyValue { get; set; }

        /// <summary>
        /// Gets or Sets GameSystem
        /// </summary>
        [DataMember(Name = "game_System", EmitDefaultValue = false)]
        public GameSystem GameSystem { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Item {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  HomeBrewOrigin: ").Append(HomeBrewOrigin).Append("\n");
            sb.Append("  ItemName: ").Append(ItemName).Append("\n");
            sb.Append("  CurrencyValue: ").Append(CurrencyValue).Append("\n");
            sb.Append("  GameSystem: ").Append(GameSystem).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Item);
        }

        /// <summary>
        /// Returns true if Item instances are equal
        /// </summary>
        /// <param name="input">Instance of Item to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Item input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.HomeBrewOrigin == input.HomeBrewOrigin ||
                    (this.HomeBrewOrigin != null &&
                    this.HomeBrewOrigin.Equals(input.HomeBrewOrigin))
                ) && 
                (
                    this.ItemName == input.ItemName ||
                    (this.ItemName != null &&
                    this.ItemName.Equals(input.ItemName))
                ) && 
                (
                    this.CurrencyValue == input.CurrencyValue ||
                    this.CurrencyValue.Equals(input.CurrencyValue)
                ) && 
                (
                    this.GameSystem == input.GameSystem ||
                    (this.GameSystem != null &&
                    this.GameSystem.Equals(input.GameSystem))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.HomeBrewOrigin != null)
                    hashCode = hashCode * 59 + this.HomeBrewOrigin.GetHashCode();
                if (this.ItemName != null)
                    hashCode = hashCode * 59 + this.ItemName.GetHashCode();
                hashCode = hashCode * 59 + this.CurrencyValue.GetHashCode();
                if (this.GameSystem != null)
                    hashCode = hashCode * 59 + this.GameSystem.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
