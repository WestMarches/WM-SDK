/*
 * WestMarches API
 *
 * West Marches API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Character
    /// </summary>
    [DataContract(Name = "Character")]
    public partial class Character : IEquatable<Character>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Character" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Character() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Character" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="owner">owner.</param>
        /// <param name="server">server.</param>
        /// <param name="name">name (required).</param>
        /// <param name="level">level (required).</param>
        /// <param name="inspiration">inspiration (required).</param>
        /// <param name="currency">currency (required).</param>
        /// <param name="experience">experience (required).</param>
        /// <param name="experienceCap">experienceCap.</param>
        /// <param name="alive">alive (required).</param>
        /// <param name="inventory">inventory.</param>
        /// <param name="roles">roles.</param>
        /// <param name="readyDate">readyDate (required).</param>
        /// <param name="ddBeyond">ddBeyond.</param>
        public Character(Guid id = default(Guid), User owner = default(User), Campaign server = default(Campaign), string name = default(string), int level = default(int), int inspiration = default(int), int currency = default(int), int experience = default(int), int experienceCap = default(int), bool alive = default(bool), List<Stock> inventory = default(List<Stock>), List<UserRoles> roles = default(List<UserRoles>), DateTime readyDate = default(DateTime), long ddBeyond = default(long))
        {
            // to ensure "name" is required (not null)
            this.Name = name ?? throw new ArgumentNullException("name is a required property for Character and cannot be null");
            this.Level = level;
            this.Inspiration = inspiration;
            this.Currency = currency;
            this.Experience = experience;
            this.Alive = alive;
            this.ReadyDate = readyDate;
            this.Id = id;
            this.Owner = owner;
            this.Server = server;
            this.ExperienceCap = experienceCap;
            this.Inventory = inventory;
            this.Roles = roles;
            this.DdBeyond = ddBeyond;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets Owner
        /// </summary>
        [DataMember(Name = "owner", EmitDefaultValue = false)]
        public User Owner { get; set; }

        /// <summary>
        /// Gets or Sets Server
        /// </summary>
        [DataMember(Name = "server", EmitDefaultValue = false)]
        public Campaign Server { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Level
        /// </summary>
        [DataMember(Name = "level", IsRequired = true, EmitDefaultValue = false)]
        public int Level { get; set; }

        /// <summary>
        /// Gets or Sets Inspiration
        /// </summary>
        [DataMember(Name = "inspiration", IsRequired = true, EmitDefaultValue = false)]
        public int Inspiration { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name = "currency", IsRequired = true, EmitDefaultValue = false)]
        public int Currency { get; set; }

        /// <summary>
        /// Gets or Sets Format
        /// </summary>
        [DataMember(Name = "format", EmitDefaultValue = true)]
        public string Format { get; private set; }

        /// <summary>
        /// Returns false as Format should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFormat()
        {
            return false;
        }

        /// <summary>
        /// Gets or Sets Experience
        /// </summary>
        [DataMember(Name = "experience", IsRequired = true, EmitDefaultValue = false)]
        public int Experience { get; set; }

        /// <summary>
        /// Gets or Sets ExperienceCap
        /// </summary>
        [DataMember(Name = "experienceCap", EmitDefaultValue = false)]
        public int ExperienceCap { get; set; }

        /// <summary>
        /// Gets or Sets Alive
        /// </summary>
        [DataMember(Name = "alive", IsRequired = true, EmitDefaultValue = false)]
        public bool Alive { get; set; }

        /// <summary>
        /// Gets or Sets Inventory
        /// </summary>
        [DataMember(Name = "inventory", EmitDefaultValue = true)]
        public List<Stock> Inventory { get; set; }

        /// <summary>
        /// Gets or Sets Roles
        /// </summary>
        [DataMember(Name = "roles", EmitDefaultValue = true)]
        public List<UserRoles> Roles { get; set; }

        /// <summary>
        /// Gets or Sets ReadyDate
        /// </summary>
        [DataMember(Name = "readyDate", IsRequired = true, EmitDefaultValue = false)]
        public DateTime ReadyDate { get; set; }

        /// <summary>
        /// Gets or Sets DdBeyond
        /// </summary>
        [DataMember(Name = "ddBeyond", EmitDefaultValue = false)]
        public long DdBeyond { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Character {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("  Server: ").Append(Server).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Level: ").Append(Level).Append("\n");
            sb.Append("  Inspiration: ").Append(Inspiration).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  Experience: ").Append(Experience).Append("\n");
            sb.Append("  ExperienceCap: ").Append(ExperienceCap).Append("\n");
            sb.Append("  Alive: ").Append(Alive).Append("\n");
            sb.Append("  Inventory: ").Append(Inventory).Append("\n");
            sb.Append("  Roles: ").Append(Roles).Append("\n");
            sb.Append("  ReadyDate: ").Append(ReadyDate).Append("\n");
            sb.Append("  DdBeyond: ").Append(DdBeyond).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Character);
        }

        /// <summary>
        /// Returns true if Character instances are equal
        /// </summary>
        /// <param name="input">Instance of Character to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Character input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Owner == input.Owner ||
                    (this.Owner != null &&
                    this.Owner.Equals(input.Owner))
                ) && 
                (
                    this.Server == input.Server ||
                    (this.Server != null &&
                    this.Server.Equals(input.Server))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Level == input.Level ||
                    this.Level.Equals(input.Level)
                ) && 
                (
                    this.Inspiration == input.Inspiration ||
                    this.Inspiration.Equals(input.Inspiration)
                ) && 
                (
                    this.Currency == input.Currency ||
                    this.Currency.Equals(input.Currency)
                ) && 
                (
                    this.Format == input.Format ||
                    (this.Format != null &&
                    this.Format.Equals(input.Format))
                ) && 
                (
                    this.Experience == input.Experience ||
                    this.Experience.Equals(input.Experience)
                ) && 
                (
                    this.ExperienceCap == input.ExperienceCap ||
                    this.ExperienceCap.Equals(input.ExperienceCap)
                ) && 
                (
                    this.Alive == input.Alive ||
                    this.Alive.Equals(input.Alive)
                ) && 
                (
                    this.Inventory == input.Inventory ||
                    this.Inventory != null &&
                    input.Inventory != null &&
                    this.Inventory.SequenceEqual(input.Inventory)
                ) && 
                (
                    this.Roles == input.Roles ||
                    this.Roles != null &&
                    input.Roles != null &&
                    this.Roles.SequenceEqual(input.Roles)
                ) && 
                (
                    this.ReadyDate == input.ReadyDate ||
                    (this.ReadyDate != null &&
                    this.ReadyDate.Equals(input.ReadyDate))
                ) && 
                (
                    this.DdBeyond == input.DdBeyond ||
                    this.DdBeyond.Equals(input.DdBeyond)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Owner != null)
                    hashCode = hashCode * 59 + this.Owner.GetHashCode();
                if (this.Server != null)
                    hashCode = hashCode * 59 + this.Server.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                hashCode = hashCode * 59 + this.Level.GetHashCode();
                hashCode = hashCode * 59 + this.Inspiration.GetHashCode();
                hashCode = hashCode * 59 + this.Currency.GetHashCode();
                if (this.Format != null)
                    hashCode = hashCode * 59 + this.Format.GetHashCode();
                hashCode = hashCode * 59 + this.Experience.GetHashCode();
                hashCode = hashCode * 59 + this.ExperienceCap.GetHashCode();
                hashCode = hashCode * 59 + this.Alive.GetHashCode();
                if (this.Inventory != null)
                    hashCode = hashCode * 59 + this.Inventory.GetHashCode();
                if (this.Roles != null)
                    hashCode = hashCode * 59 + this.Roles.GetHashCode();
                if (this.ReadyDate != null)
                    hashCode = hashCode * 59 + this.ReadyDate.GetHashCode();
                hashCode = hashCode * 59 + this.DdBeyond.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
